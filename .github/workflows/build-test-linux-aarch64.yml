name: Build and test Linux aarch64 wheels

on:
  pull_request:
  push:
    branches:
      - main
      - nightly
      - release/*
    tags:
      # NOTE: Binary build pipelines should only get triggered on release candidate builds
      # Release candidate tags look like: v1.11.0-rc1
      - v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+
  workflow_dispatch:

jobs:
  generate-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: wheel
      os: linux-aarch64
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      with-rocm: false
      with-cpu: false

  filter-matrix:
    needs: [generate-matrix]
    outputs:
      matrix: ${{ steps.filter.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/checkout@v4
        with:
          repository: pytorch/tensorrt
      - name: Filter matrix
        id: filter
        env:
          LIMIT_PR_BUILDS: ${{ github.event_name == 'pull_request' && !contains( github.event.pull_request.labels.*.name, 'ciflow/binaries/all') }}
        run: |
          set -eou pipefail
          MATRIX_BLOB=${{ toJSON(needs.generate-matrix.outputs.matrix) }}
          MATRIX_BLOB="$(python3 .github/scripts/filter-matrix.py --matrix "${MATRIX_BLOB}")"
          echo "${MATRIX_BLOB}"
          echo "matrix=${MATRIX_BLOB}" >> "${GITHUB_OUTPUT}"

  build:
    needs: filter-matrix
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            pre-script: packaging/pre_build_script.sh
            env-var-script: packaging/env_vars.txt
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
            package-name: torch_tensorrt
    name: Build torch-tensorrt whl package
    uses: ./.github/workflows/build_wheels_linux_aarch64.yml
    with:
      repository: ${{ matrix.repository }}
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      env-var-script: ${{ matrix.env-var-script }}
      post-script: ${{ matrix.post-script }}
      package-name: ${{ matrix.package-name }}
      smoke-test-script: ${{ matrix.smoke-test-script }}
      trigger-event: ${{ github.event_name }}
      architecture: "aarch64"

  # tests-py-torchscript-fe:
  #   name: Test torchscript frontend [Python]
  #   needs: [filter-matrix, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - repository: pytorch/tensorrt
  #           package-name: torch_tensorrt
  #           pre-script: packaging/pre_build_script.sh
  #           post-script: packaging/post_build_script.sh
  #           smoke-test-script: packaging/smoke_test_script.sh
  #   uses: ./.github/workflows/linux-test.yml
  #   with:
  #     job-name: tests-py-torchscript-fe
  #     repository: "pytorch/tensorrt"
  #     ref: ""
  #     test-infra-repository: pytorch/test-infra
  #     test-infra-ref: main
  #     build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
  #     pre-script: ${{ matrix.pre-script }}
  #     architecture: "aarch64"
  #     script: |
  #       set -euo pipefail
  #       export USE_HOST_DEPS=1
  #       export CI_BUILD=1
  #       export LD_LIBRARY_PATH=/usr/lib64:$LD_LIBRARY_PATH
  #       pushd .
  #       cd tests/modules
  #       python hub.py
  #       popd
  #       pushd .
  #       cd tests/py/ts
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/ts_api_test_results.xml api/
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/ts_models_test_results.xml models/
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/ts_integrations_test_results.xml integrations/
  #       popd
  substitute-runner:
    needs: filter-matrix
    outputs:
      matrix: ${{ steps.substitute.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Substitute runner
        id: substitute
        run: |
          echo matrix="$(echo '${{ needs.filter-matrix.outputs.matrix }}' | sed -e 's/quay.io\/pypa\/manylinux_2_34_aarch64/pytorch\/manylinuxaarch64-builder:cuda12.9/g')" >> ${GITHUB_OUTPUT}

  tests-py-dynamo-converters:
    name: Test dynamo converters [Python]
    needs: [build, substitute-runner]
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            package-name: torch_tensorrt
            pre-script: packaging/pre_build_script.sh
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
    uses: ./.github/workflows/linux-test.yml
    with:
      job-name: tests-py-dynamo-converters
      repository: "pytorch/tensorrt"
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      architecture: "aarch64"
      script: |
        set -x
        export USE_HOST_DEPS=1
        export CI_BUILD=1
        pushd .
        cd tests/py
        cd dynamo
        ls -l /usr/local/cuda
        nvcc --version
        echo $PATH
        echo $LD_LIBRARY_PATH
        echo $CUDA_HOME
        # Check if nvidia-smi is available and working
        if command -v nvidia-smi &> /dev/null; then
            nvidia-smi
        else
            echo "nvidia-smi not found - no NVIDIA GPU or drivers installed"
        fi
        # Check for NVIDIA device files in /dev
        if compgen -G "/dev/nvidia[0-9]" >/dev/null; then
            echo "NVIDIA GPU devices found:"
            ls -la /dev/nvidia*
        else
            echo "No NVIDIA GPU devices found in /dev"
        fi
        # Check for NVIDIA GPU controllers in PCI devices
        if lspci -v | grep -e 'controller.*NVIDIA' >/dev/null 2>/dev/null; then
            echo "NVIDIA GPU found"
            lspci | grep -i nvidia
        else
            echo "No NVIDIA GPU found"
        fi

        # Check if NVIDIA kernel module is loaded
        if lsmod | grep -q nvidia; then
            echo "NVIDIA kernel module is loaded"
            lsmod | grep nvidia
        else
            echo "NVIDIA kernel module not loaded"
        fi

        python -c "import torch; print(torch.__version__); print(torch.cuda.get_arch_list()); print(torch.randn(1).cuda())"
        python -c "import torch; print(f'{torch.cuda.is_available()=}')"
        python -c "import torch; print(f'{torch.version.cuda=}')"
        python -c "import torch; print(f'{torch.cuda.get_device_name(0)=}')"

        set -euo pipefail
        python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/dynamo_converters_test_results.xml -n 4 conversion/test_abs_aten.py
        #python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/dynamo_converters_test_results.xml automatic_plugin/test_automatic_plugin.py
        #python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/dynamo_converters_test_results.xml automatic_plugin/test_automatic_plugin_with_attrs.py
        popd

  # tests-py-dynamo-fe:
  #   name: Test dynamo frontend [Python]
  #   needs: [filter-matrix, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - repository: pytorch/tensorrt
  #           package-name: torch_tensorrt
  #           pre-script: packaging/pre_build_script.sh
  #           post-script: packaging/post_build_script.sh
  #           smoke-test-script: packaging/smoke_test_script.sh
  #   uses: ./.github/workflows/linux-test.yml
  #   with:
  #     job-name: tests-py-dynamo-fe
  #     repository: "pytorch/tensorrt"
  #     ref: ""
  #     test-infra-repository: pytorch/test-infra
  #     test-infra-ref: main
  #     build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
  #     pre-script: ${{ matrix.pre-script }}
  #     architecture: "aarch64"
  #     script: |
  #       set -euo pipefail
  #       export USE_HOST_DEPS=1
  #       export CI_BUILD=1
  #       pushd .
  #       cd tests/py
  #       cd dynamo
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/dyn_models_export.xml --ir dynamo models/
  #       popd

  # tests-py-dynamo-serde:
  #   name: Test dynamo export serde [Python]
  #   needs: [filter-matrix, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - repository: pytorch/tensorrt
  #           package-name: torch_tensorrt
  #           pre-script: packaging/pre_build_script.sh
  #           post-script: packaging/post_build_script.sh
  #           smoke-test-script: packaging/smoke_test_script.sh
  #   uses: ./.github/workflows/linux-test.yml
  #   with:
  #     job-name: tests-py-dynamo-serde
  #     repository: "pytorch/tensorrt"
  #     ref: ""
  #     test-infra-repository: pytorch/test-infra
  #     test-infra-ref: main
  #     build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
  #     pre-script: ${{ matrix.pre-script }}
  #     architecture: "aarch64"
  #     script: |
  #       set -euo pipefail
  #       export USE_HOST_DEPS=1
  #       export CI_BUILD=1
  #       pushd .
  #       cd tests/py
  #       cd dynamo
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/export_serde_test_results.xml --ir dynamo models/test_export_serde.py
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/reexport_test_results.xml --ir dynamo models/test_reexport.py
  #       popd

  # tests-py-torch-compile-be:
  #   name: Test torch compile backend [Python]
  #   needs: [filter-matrix, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - repository: pytorch/tensorrt
  #           package-name: torch_tensorrt
  #           pre-script: packaging/pre_build_script.sh
  #           post-script: packaging/post_build_script.sh
  #           smoke-test-script: packaging/smoke_test_script.sh
  #   uses: ./.github/workflows/linux-test.yml
  #   with:
  #     job-name: tests-py-torch-compile-be
  #     repository: "pytorch/tensorrt"
  #     ref: ""
  #     test-infra-repository: pytorch/test-infra
  #     test-infra-ref: main
  #     build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
  #     pre-script: ${{ matrix.pre-script }}
  #     architecture: "aarch64"
  #     script: |
  #       set -euo pipefail
  #       export USE_HOST_DEPS=1
  #       export CI_BUILD=1
  #       pushd .
  #       cd tests/py
  #       cd dynamo
  #       python -m pytest -ra -n 10 --junitxml=${RUNNER_TEST_RESULTS_DIR}/torch_compile_be_test_results.xml backend/
  #       python -m pytest -ra -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/torch_complete_be_e2e_test_results.xml --ir torch_compile models/test_models.py
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/torch_compile_dyn_models_export.xml --ir torch_compile models/test_dyn_models.py
  #       popd

  # tests-py-dynamo-core:
  #   name: Test dynamo core [Python]
  #   needs: [filter-matrix, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - repository: pytorch/tensorrt
  #           package-name: torch_tensorrt
  #           pre-script: packaging/pre_build_script.sh
  #           post-script: packaging/post_build_script.sh
  #           smoke-test-script: packaging/smoke_test_script.sh
  #   uses: ./.github/workflows/linux-test.yml
  #   with:
  #     job-name: tests-py-dynamo-core
  #     repository: "pytorch/tensorrt"
  #     ref: ""
  #     test-infra-repository: pytorch/test-infra
  #     test-infra-ref: main
  #     build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
  #     pre-script: ${{ matrix.pre-script }}
  #     architecture: "aarch64"
  #     script: |
  #       set -euo pipefail
  #       export USE_HOST_DEPS=1
  #       export CI_BUILD=1
  #       pushd .
  #       cd tests/py
  #       cd dynamo
  #       python -m pytest -ra -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_dynamo_core_runtime_test_results.xml --ignore runtime/test_002_cudagraphs_py.py --ignore runtime/test_002_cudagraphs_cpp.py runtime/
  #       python -m pytest -ra -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_dynamo_core_partitioning_test_results.xml partitioning/
  #       python -m pytest -ra -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_dynamo_core_lowering_test_results.xml lowering/
  #       popd

  # tests-py-dynamo-cudagraphs:
  #   name: Test dynamo cudagraphs [Python]
  #   needs: [filter-matrix, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - repository: pytorch/tensorrt
  #           package-name: torch_tensorrt
  #           pre-script: packaging/pre_build_script.sh
  #           post-script: packaging/post_build_script.sh
  #           smoke-test-script: packaging/smoke_test_script.sh
  #   uses: ./.github/workflows/linux-test.yml
  #   with:
  #     job-name: tests-py-dynamo-cudagraphs
  #     repository: "pytorch/tensorrt"
  #     ref: ""
  #     test-infra-repository: pytorch/test-infra
  #     test-infra-ref: main
  #     build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
  #     pre-script: ${{ matrix.pre-script }}
  #     architecture: "aarch64"
  #     script: |
  #       set -euo pipefail
  #       export USE_HOST_DEPS=1
  #       export CI_BUILD=1
  #       pushd .
  #       cd tests/py
  #       cd dynamo
  #       nvidia-smi
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_dynamo_core_runtime_cudagraphs_cpp_test_results.xml runtime/test_002_cudagraphs_cpp.py || true
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_dynamo_core_runtime_cudagraphs_py_test_results.xml runtime/test_002_cudagraphs_py.py || true
  #       popd

  # tests-py-core:
  #   name: Test core [Python]
  #   needs: [filter-matrix, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - repository: pytorch/tensorrt
  #           package-name: torch_tensorrt
  #           pre-script: packaging/pre_build_script.sh
  #           post-script: packaging/post_build_script.sh
  #           smoke-test-script: packaging/smoke_test_script.sh
  #   uses: ./.github/workflows/linux-test.yml
  #   with:
  #     job-name: tests-py-core
  #     repository: "pytorch/tensorrt"
  #     ref: ""
  #     test-infra-repository: pytorch/test-infra
  #     test-infra-ref: main
  #     build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
  #     pre-script: ${{ matrix.pre-script }}
  #     architecture: "aarch64"
  #     script: |
  #       set -euo pipefail
  #       export USE_HOST_DEPS=1
  #       export CI_BUILD=1
  #       pushd .
  #       cd tests/py/core
  #       python -m pytest -ra -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_core_test_results.xml .
  #       popd

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref_name }}-${{ inputs.repository }}-${{ github.event_name == 'workflow_dispatch' }}-${{ inputs.job-name }}
  cancel-in-progress: true