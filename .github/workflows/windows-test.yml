name: Test on Windows

on:
  workflow_call:
    inputs:
      repository:
        description: 'Repository to checkout, defaults to ""'
        default: ""
        type: string
      ref:
        description: 'Reference to checkout, defaults to "nightly"'
        default: "nightly"
        type: string
      test-infra-repository:
        description: "Test infra repository to use"
        default: "pytorch/test-infra"
        type: string
      test-infra-ref:
        description: "Test infra reference to use"
        default: ""
        type: string
      build-matrix:
        description: "Build matrix to utilize"
        default: ""
        type: string
      pre-script:
        description: "Pre script to run prior to build"
        default: ""
        type: string
      script:
        description: 'Script to utilize'
        default: "python setup.py bdist_wheel"
        type: string
      job-name:
        description: "Name for the job, which is displayed in the GitHub UI"
        default: "windows-job"
        type: string
      continue-on-error:
        description: "Prevents a job from failing when a step fails. Set to true to allow a job to pass when exec script step fails."
        default: false
        type: boolean
      architecture:
        description: 'CPU architecture to build for'
        default: "x64"
        type: string
jobs:
  test:
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(inputs.build-matrix) }}
    env:
      PYTHON_VERSION: ${{ matrix.python_version }}
      PACKAGE_TYPE: wheel
      REPOSITORY: ${{ inputs.repository }}
      REF: ${{ inputs.ref }}
      CU_VERSION: ${{ matrix.desired_cuda }}
      SCRIPT: ${{ inputs.script }}
      PYTHONUTF8: 1
      DOWNLOAD_ARTIFACT_NAME: pytorch_tensorrt_${{ matrix.tensorrt.version }}_${{ matrix.python_version }}_${{ matrix.desired_cuda }}_win_amd64
    name: ${{ inputs.job-name }}-${{ matrix.tensorrt.version }}-${{ matrix.python_version }}-${{ matrix.desired_cuda }}
    runs-on: ${{ matrix.validation_runner }}
    defaults:
      run:
        shell: bash -l {0}
    # If a build is taking longer than 120 minutes on these runners we need
    # to have a conversation
    timeout-minutes: 120
    steps:
      - name: Clean workspace
        run: |
          echo "::group::Cleanup debug output"
          rm -rfv "${GITHUB_WORKSPACE}"
          mkdir -p "${GITHUB_WORKSPACE}"
          echo "::endgroup::"
      - name: Checkout repository (${{ inputs.test-infra-repository }}@${{ inputs.test-infra-ref }})
        uses: actions/checkout@v4
        with:
          # Support the use case where we need to checkout someone's fork
          repository: ${{ inputs.test-infra-repository }}
          ref: ${{ inputs.test-infra-ref }}
          path: test-infra
      - name: Setup Windows
        uses: ./test-infra/.github/actions/setup-windows
      - name: Setup SSH
        uses: ./test-infra/.github/actions/setup-ssh
        with:
          github-secret: ${{ github.token }}
      - name: Add Conda scripts to GitHub path
        run: |
          echo "C:/Jenkins/Miniconda3/Scripts" >> $GITHUB_PATH
      - uses: ./test-infra/.github/actions/set-channel
      - uses: ./test-infra/.github/actions/setup-binary-builds
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          setup-miniconda: false
          python-version: ${{ env.PYTHON_VERSION }}
          cuda-version: ${{ env.CU_VERSION }}
          arch: ${{ env.ARCH }}
      - name: Run Pre-Script with Caching
        if: ${{ inputs.pre-script != '' }}
        uses: ./test-infra/.github/actions/run-script-with-cache
        with:
          cache-path: ${{ inputs.cache-path }}
          cache-key: ${{ inputs.cache-key }}
          repository: ${{ inputs.repository  }}
          script: ${{ inputs.pre-script }}
          is_windows: 'enabled'
      - name: Download artifacts
        if: ${{ matrix.tensorrt == '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}${{ inputs.architecture }}
          path: ${{ runner.temp }}/artifacts/
      - name: Download artifacts
        if: ${{ matrix.tensorrt != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.DOWNLOAD_ARTIFACT_NAME }}
          path: ${{ runner.temp }}/artifacts/
      - name: Pack script
        continue-on-error: ${{ inputs.continue-on-error }}
        working-directory: ${{ inputs.repository }}
        env:
          ALL_SECRETS: ${{ toJSON(secrets) }}
        run: |
          set -eou pipefail
          source "${BUILD_ENV_FILE}"
          {
            echo "${SCRIPT}";
          } > "user_script"
          cat .github/scripts/install-torch-tensorrt.sh user_script > exec_script
      - name: Run script
        uses: ./test-infra/.github/actions/run-script-with-cache
        with:
          repository: ${{ inputs.repository  }}
          script: exec_script
          is_windows: 'enabled'
      - name: Surface failing tests
        if: always()
        uses: pmeier/pytest-results-action@v0.3.0
        with:
          path: ${{ env.RUNNER_TEST_RESULTS_DIR }}
          fail-on-empty: false
      - name: Teardown Windows
        if: ${{ always() }}
        uses: ./test-infra/.github/actions/teardown-windows

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref_name }}-${{ inputs.repository }}-${{ github.event_name == 'workflow_dispatch' }}-${{ inputs.job-name }}
  cancel-in-progress: true
