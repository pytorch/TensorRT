name: RTX - Build and test Linux x86_64 wheels

on:
  pull_request:
  push:
    branches:
      - main
      - nightly
      - release/*
    tags:
      # NOTE: Binary build pipelines should only get triggered on release candidate builds
      # Release candidate tags look like: v1.11.0-rc1
      - v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+
  workflow_dispatch:

jobs:
  generate-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: wheel
      os: linux
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      with-rocm: false
      with-cpu: false

  filter-matrix:
    needs: [generate-matrix]
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: actions/checkout@v4
        with:
          repository: pytorch/tensorrt
      - name: Generate matrix
        id: generate
        run: |
          set -eou pipefail
          MATRIX_BLOB=${{ toJSON(needs.generate-matrix.outputs.matrix) }}
          MATRIX_BLOB="$(python3 .github/scripts/filter-matrix.py --matrix "${MATRIX_BLOB}")"
          echo "${MATRIX_BLOB}"
          echo "matrix=${MATRIX_BLOB}" >> "${GITHUB_OUTPUT}"

  build:
    needs: filter-matrix
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            pre-script: packaging/pre_build_script.sh
            env-var-script: packaging/env_vars.txt
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
            package-name: torch_tensorrt
    name: Build torch-tensorrt-rtx whl package for x86_64
    uses: ./.github/workflows/build_wheels_linux.yml
    with:
      repository: ${{ matrix.repository }}
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      env-var-script: ${{ matrix.env-var-script }}
      post-script: ${{ matrix.post-script }}
      package-name: ${{ matrix.package-name }}
      smoke-test-script: ${{ matrix.smoke-test-script }}
      trigger-event: ${{ github.event_name }}
      architecture: "x86_64"
      use-rtx: true

  tests-py-torchscript-fe:
    name: Test resnet50 and bert [Python]
    needs: [filter-matrix, build]
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            package-name: torch_tensorrt
            pre-script: packaging/pre_build_script.sh
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
    uses: ./.github/workflows/linux-test.yml
    with:
      job-name: tests-py-torchscript-fe
      repository: "pytorch/tensorrt"
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      use-rtx: true
      script: |
        set -x
        export USE_HOST_DEPS=1
        export CI_BUILD=1
        export LD_LIBRARY_PATH=/usr/lib64:$LD_LIBRARY_PATH
        nvidia-smi
        python -c "import torch; print(torch.cuda.get_device_capability())"
        python -c "import torch; print(torch.cuda.get_device_properties(0))"
        python tools/perf/resnet50.py
        python tools/perf/bert.py

  tests-py-dynamo-converters:
    name: Test Qwen/Qwen3-0.6B [Python]
    needs: [filter-matrix, build]
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            package-name: torch_tensorrt
            pre-script: packaging/pre_build_script.sh
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
    uses: ./.github/workflows/linux-test.yml
    with:
      job-name: tests-py-dynamo-converters
      repository: "pytorch/tensorrt"
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      use-rtx: true
      script: |
        set -x
        export USE_HOST_DEPS=1
        export CI_BUILD=1
        nvidia-smi
        python -c "import torch; print(torch.cuda.get_device_capability())"
        python -c "import torch; print(torch.cuda.get_device_properties(0))"
        python tools/llm/run_llm.py --model Qwen/Qwen3-0.6B --prompt "Gemma is Googleâ€™s family of open-weights LLMs, launched in February 2024 (Gemma 1.0, 2B/7B sizes). Designed to be lightweight, efficient, can you please tell me the difference between gemma3 and deepseek? which one is better in performance?" --precision FP16 --num_tokens 128 --benchmark

  # tests-py-dynamo-fe:
  #   name: Test dynamo frontend [Python]
  #   needs: [filter-matrix, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - repository: pytorch/tensorrt
  #           package-name: torch_tensorrt
  #           pre-script: packaging/pre_build_script.sh
  #           post-script: packaging/post_build_script.sh
  #           smoke-test-script: packaging/smoke_test_script.sh
  #   uses: ./.github/workflows/linux-test.yml
  #   with:
  #     job-name: tests-py-dynamo-fe
  #     repository: "pytorch/tensorrt"
  #     ref: ""
  #     test-infra-repository: pytorch/test-infra
  #     test-infra-ref: main
  #     build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
  #     pre-script: ${{ matrix.pre-script }}
  #     use-rtx: true
  #     script: |
  #       set -euo pipefail
  #       export USE_HOST_DEPS=1
  #       export CI_BUILD=1
  #       pushd .
  #       cd tests/py
  #       cd dynamo
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/dyn_models_export.xml --ir dynamo models/
  #       popd

  # tests-py-dynamo-serde:
  #   name: Test dynamo export serde [Python]
  #   needs: [filter-matrix, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - repository: pytorch/tensorrt
  #           package-name: torch_tensorrt
  #           pre-script: packaging/pre_build_script.sh
  #           post-script: packaging/post_build_script.sh
  #           smoke-test-script: packaging/smoke_test_script.sh
  #   uses: ./.github/workflows/linux-test.yml
  #   with:
  #     job-name: tests-py-dynamo-serde
  #     repository: "pytorch/tensorrt"
  #     ref: ""
  #     test-infra-repository: pytorch/test-infra
  #     test-infra-ref: main
  #     build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
  #     pre-script: ${{ matrix.pre-script }}
  #     use-rtx: true
  #     script: |
  #       set -euo pipefail
  #       export USE_HOST_DEPS=1
  #       export CI_BUILD=1
  #       pushd .
  #       cd tests/py
  #       cd dynamo
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/export_serde_test_results.xml --ir dynamo models/test_export_serde.py
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/reexport_test_results.xml --ir dynamo models/test_reexport.py
  #       popd

  # tests-py-torch-compile-be:
  #   name: Test torch compile backend [Python]
  #   needs: [filter-matrix, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - repository: pytorch/tensorrt
  #           package-name: torch_tensorrt
  #           pre-script: packaging/pre_build_script.sh
  #           post-script: packaging/post_build_script.sh
  #           smoke-test-script: packaging/smoke_test_script.sh
  #   uses: ./.github/workflows/linux-test.yml
  #   with:
  #     job-name: tests-py-torch-compile-be
  #     repository: "pytorch/tensorrt"
  #     ref: ""
  #     test-infra-repository: pytorch/test-infra
  #     test-infra-ref: main
  #     build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
  #     pre-script: ${{ matrix.pre-script }}
  #     use-rtx: true
  #     script: |
  #       set -euo pipefail
  #       export USE_HOST_DEPS=1
  #       export CI_BUILD=1
  #       pushd .
  #       cd tests/py
  #       cd dynamo
  #       python -m pytest -ra -n 10 --junitxml=${RUNNER_TEST_RESULTS_DIR}/torch_compile_be_test_results.xml backend/
  #       python -m pytest -ra -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/torch_complete_be_e2e_test_results.xml --ir torch_compile models/test_models.py
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/torch_compile_dyn_models_export.xml --ir torch_compile models/test_dyn_models.py
  #       popd

  # tests-py-dynamo-core:
  #   name: Test dynamo core [Python]
  #   needs: [filter-matrix, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - repository: pytorch/tensorrt
  #           package-name: torch_tensorrt
  #           pre-script: packaging/pre_build_script.sh
  #           post-script: packaging/post_build_script.sh
  #           smoke-test-script: packaging/smoke_test_script.sh
  #   uses: ./.github/workflows/linux-test.yml
  #   with:
  #     job-name: tests-py-dynamo-core
  #     repository: "pytorch/tensorrt"
  #     ref: ""
  #     test-infra-repository: pytorch/test-infra
  #     test-infra-ref: main
  #     build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
  #     pre-script: ${{ matrix.pre-script }}
  #     use-rtx: true
  #     script: |
  #       set -euo pipefail
  #       export USE_HOST_DEPS=1
  #       export CI_BUILD=1
  #       pushd .
  #       cd tests/py
  #       cd dynamo
  #       python -m pytest -ra -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_dynamo_core_runtime_test_results.xml --ignore runtime/test_002_cudagraphs_py.py --ignore runtime/test_002_cudagraphs_cpp.py runtime/
  #       python -m pytest -ra -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_dynamo_core_partitioning_test_results.xml partitioning/
  #       python -m pytest -ra -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_dynamo_core_lowering_test_results.xml lowering/
  #       popd

  # tests-py-dynamo-cudagraphs:
  #   name: Test dynamo cudagraphs [Python]
  #   needs: [filter-matrix, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - repository: pytorch/tensorrt
  #           package-name: torch_tensorrt
  #           pre-script: packaging/pre_build_script.sh
  #           post-script: packaging/post_build_script.sh
  #           smoke-test-script: packaging/smoke_test_script.sh
  #   uses: ./.github/workflows/linux-test.yml
  #   with:
  #     job-name: tests-py-dynamo-cudagraphs
  #     repository: "pytorch/tensorrt"
  #     ref: ""
  #     test-infra-repository: pytorch/test-infra
  #     test-infra-ref: main
  #     build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
  #     pre-script: ${{ matrix.pre-script }}
  #     use-rtx: true
  #     script: |
  #       set -euo pipefail
  #       export USE_HOST_DEPS=1
  #       export CI_BUILD=1
  #       pushd .
  #       cd tests/py
  #       cd dynamo
  #       nvidia-smi
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_dynamo_core_runtime_cudagraphs_cpp_test_results.xml runtime/test_002_cudagraphs_cpp.py || true
  #       python -m pytest -ra --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_dynamo_core_runtime_cudagraphs_py_test_results.xml runtime/test_002_cudagraphs_py.py || true
  #       popd

  # tests-py-core:
  #   name: Test core [Python]
  #   needs: [filter-matrix, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - repository: pytorch/tensorrt
  #           package-name: torch_tensorrt
  #           pre-script: packaging/pre_build_script.sh
  #           post-script: packaging/post_build_script.sh
  #           smoke-test-script: packaging/smoke_test_script.sh
  #   uses: ./.github/workflows/linux-test.yml
  #   with:
  #     job-name: tests-py-core
  #     repository: "pytorch/tensorrt"
  #     ref: ""
  #     test-infra-repository: pytorch/test-infra
  #     test-infra-ref: main
  #     build-matrix: ${{ needs.filter-matrix.outputs.matrix }}
  #     pre-script: ${{ matrix.pre-script }}
  #     use-rtx: true
  #     script: |
  #       set -euo pipefail
  #       export USE_HOST_DEPS=1
  #       export CI_BUILD=1
  #       pushd .
  #       cd tests/py/core
  #       python -m pytest -ra -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_core_test_results.xml .
  #       popd

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref_name }}-tensorrt-rtx-${{ inputs.repository }}-${{ github.event_name == 'workflow_dispatch' }}-${{ inputs.job-name }}
  cancel-in-progress: true
