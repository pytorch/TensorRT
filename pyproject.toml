[build-system]
requires = [
    "setuptools>=77.0.0",
    "packaging>=23.1",
    "wheel>=0.40.0",
    "ninja>=1.11.0",
    "pyyaml>=6.0",
    "cffi>=1.15.1",
    "torch>=2.9.0.dev,<2.10.0; platform_machine != 'aarch64' or (platform_machine == 'aarch64' and 'tegra' not in platform_release)",
    "torch>=2.7.0,<2.8.0; platform_machine == 'aarch64' and 'tegra' in platform_release",
    "pybind11==2.6.2",
]
build-backend = "setuptools.build_meta"

[project]
name = "torch_tensorrt"
authors = [{ name = "NVIDIA Corporation", email = "narens@nvidia.com" }]
description = "Torch-TensorRT is a package which allows users to automatically compile PyTorch and TorchScript modules to TensorRT while remaining in PyTorch"
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: GPU :: NVIDIA CUDA",
    "License :: OSI Approved :: BSD License",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: C++",
    "Programming Language :: Python",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
]
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.9"
keywords = [
    "pytorch",
    "torch",
    "tensorrt",
    "trt",
    "ai",
    "artificial intelligence",
    "ml",
    "machine learning",
    "dl",
    "deep learning",
    "compiler",
    "dynamo",
    "torchscript",
    "inference",
]
dependencies = [
    "torch>=2.9.0.dev,<2.10.0; platform_machine != 'aarch64' or (platform_machine == 'aarch64' and 'tegra' not in platform_release)",
    "torch>=2.7.0,<2.8.0; platform_machine == 'aarch64' and 'tegra' in platform_release",

    "tensorrt>=10.11.0,<10.12.0; platform_machine != 'aarch64' or (platform_machine == 'aarch64' and 'tegra' not in platform_release)",
    "tensorrt-cu12>=10.11.0,<10.12.0; platform_machine != 'aarch64' or (platform_machine == 'aarch64' and 'tegra' not in platform_release)",
    "tensorrt-cu12-bindings>=10.11.0,<10.12.0; platform_machine != 'aarch64' or (platform_machine == 'aarch64' and 'tegra' not in platform_release)",
    "tensorrt-cu12-libs>=10.11.0,<10.12.0; platform_machine != 'aarch64' or (platform_machine == 'aarch64' and 'tegra' not in platform_release)",

    "tensorrt>=10.3.0,<10.4.0;platform_machine == 'aarch64' and 'tegra' in platform_release",
    "tensorrt-cu12>=10.3.0,<10.4.0; platform_machine == 'aarch64' and 'tegra' in platform_release",
    "tensorrt-cu12-bindings>=10.3.0,<10.4.0; platform_machine == 'aarch64' and 'tegra' in platform_release",
    "tensorrt-cu12-libs>=10.3.0,<10.4.0; platform_machine == 'aarch64' and 'tegra' in platform_release",

    "packaging>=23",

    "numpy; platform_machine != 'aarch64' or (platform_machine == 'aarch64' and 'tegra' not in platform_release)",
    "numpy<2.0.0; platform_machine == 'aarch64' and 'tegra' in platform_release",

    "typing-extensions>=4.7.0",
    "dllist",
]

dynamic = ["version"]

[dependency-groups]
dev = [
    "pre-commit>=2.20.0",
    "black>=22.6.0",
    "clang-format==14.0.6",
    "typos",
    "mypy",
    "isort",
    "ruff",
    "pyyaml",
]

debug = [
    "pydot >= 4.0.0",
    "tabulate >= 0.8.10",
    "graphviz >= 0.20.3"
]

test = [
    "pytest",
    "pytest-xdist",
    "parameterized>=0.2.0",
    "expecttest==0.1.6",
    "timm>=1.0.3",
    "transformers>=4.49.0",
]

[project.optional-dependencies]
torchvision = [
    "torchvision>=0.23.0.dev,<0.24.0; platform_machine != 'aarch64' or (platform_machine == 'aarch64' and 'tegra' not in platform_release)",
    "torchvision>=0.22.0,<0.23.0; platform_machine == 'aarch64' and 'tegra' in platform_release",
]
quantization = ["nvidia-modelopt[all]>=0.27.1"]

[project.urls]
Homepage = "https://pytorch.org/tensorrt"
Documentation = "https://pytorch.org/tensorrt"
Repository = "https://github.com/pytorch/tensorrt.git"
Changelog = "https://github.com/pytorch/tensorrt/releases"

[tool.setuptools]
package-dir = { "" = "py" }
include-package-data = false

[tool.uv]
package = true
environments = ["sys_platform == 'linux'", "sys_platform == 'windows'"]
prerelease = "if-necessary-or-explicit"
index-strategy = "unsafe-best-match"

[tool.uv.sources]
torch = [
    { index = "pytorch-nightly-cu129", marker = "platform_machine != 'aarch64' or (platform_machine == 'aarch64' and 'tegra' not in platform_release)" },
    { index = "jetson-containers", marker = "platform_machine == 'aarch64' and 'tegra' in platform_release" },
]
torchvision = [
    { index = "pytorch-nightly-cu129", marker = "platform_machine != 'aarch64' or (platform_machine == 'aarch64' and 'tegra' not in platform_release)" },
    { index = "jetson-containers", marker = "platform_machine == 'aarch64' and 'tegra' in platform_release" },
]

[[tool.uv.index]]
name = "pytorch-nightly-cu129"
url = "https://download.pytorch.org/whl/nightly/cu129"
explicit = false

[[tool.uv.index]]
name = "jetson-containers"
url = "https://pypi.jetson-ai-lab.dev/jp6/cu126/+simple"
explicit = false

[[tool.uv.index]]
name = "nvidia"
url = "https://pypi.nvidia.com"
explicit = false

# [[tool.uv.index]]
# name = "pytorch-nightly-cu124"
# url = "https://download.pytorch.org/whl/nightly/cu124"
# explicit = true

# [[tool.uv.index]]
# name = "pytorch-nightly-cu118"
# url = "https://download.pytorch.org/whl/nightly/cu118"
# explicit = true

# [[tool.uv.index]]
# name = "pytorch-test-cu124"
# url = "https://download.pytorch.org/whl/test/cu124"
# explicit = false

# [[tool.uv.index]]
# name = "pytorch-test-cu118"
# url = "https://download.pytorch.org/whl/test/cu118"
# explicit = false

# [[tool.uv.index]]
# name = "pytorch-release-cu124"
# url = "https://download.pytorch.org/whl/cu124"
# explicit = false

# [[tool.uv.index]]
# name = "pytorch-release-cu118"
# url = "https://download.pytorch.org/whl/cu118"
# explicit = false


[tool.ruff]
# NOTE: Synchoronize the ignores with .flake8
lint.ignore = [
    # these ignores are from flake8-bugbear; please fix!
    "B007",
    "B008",
    "B017",
    "B018",   # Useless expression
    "B019",
    "B020",
    "B023",
    "B024",
    "B026",
    "B028",   # No explicit `stacklevel` keyword argument found
    "B904",
    "B905",
    "E402",
    "C408",   # C408 ignored because we like the dict keyword argument syntax
    "E501",   # E501 is not flexible enough, we're using B950 instead
    "E721",
    "E731",   # Assign lambda expression
    "E741",
    "EXE001",
    "F405",
    "F821",
    "F841",
    # these ignores are from flake8-logging-format; please fix!
    "G101",
    "G201",
    "G202",
    "G003",
    "G004",
    # these ignores are from RUFF perf; please fix!
    "PERF203",
    "PERF4",
    "SIM102",
    "SIM103",
    "SIM112",  # flake8-simplify code styles
    "SIM105",  # these ignores are from flake8-simplify. please fix or ignore with commented reason
    "SIM108",
    "SIM110",
    "SIM114",  # Combine `if` branches using logical `or` operator
    "SIM115",
    "SIM116",  # Disable Use a dictionary instead of consecutive `if` statements
    "SIM117",
    "SIM118",
]
#line-length = 120
lint.select = [
    "B",
    "C4",
    "G",
    "E",
    "F",
    "SIM1",
    "W",
    # Not included in flake8
    "PERF",
    "PLE",
    "TRY302",
]

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
lint.unfixable = []
target-version = "py311"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "env",
    "py/torch_tensorrt/fx",
    ".github",
    "examples",
    "tests",
    "tools",
    "docs",
    "docsrc",
    "tests",
    "setup.py",
    "noxfile.py",
    "__init__.py",
]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.isort]
profile = "black"
py_version = 311
skip = ["py/torch_tensorrt/fx"]

[tool.black]
#line-length = 120
target-version = ["py38", "py39", "py310", "py311", "py312"]
force-exclude = """
elu_converter/setup.py
"""

[tool.mypy]
strict = true
ignore_missing_imports = true
show_error_codes = true
disable_error_code = "attr-defined"
no_implicit_optional = true
exclude = [
    "^py/torch_tensorrt/fx",
    "py/torch_tensorrt/fx",
    "torch_tensorrt/fx",
    "py/torch_tensorrt/_C.so",
    "examples",
    "docs",
    "docsrc",
    "tests",
    "setup.py",
    "noxfile.py",
]
python_version = "3.11"

follow_imports = "skip"

[[tool.mypy.overrides]]
module = "torch_tensorrt.dynamo.conversion.aten_converters"
disable_error_code = "arg-type"

[[tool.mypy.overrides]]
module = "torch_tensorrt.dynamo.lowering._decompositions"
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = "torch_tensorrt.fx.*"
ignore_errors = true
follow_imports = "skip"

[tool.typos]
files.extend-exclude = [
    "docs/**/*",
    "*/fx/*",
    "docsrc/_rendered_examples/",
    "core/*",
    "!core/runtime/",
    "third_party/",
    "CHANGELOG.md",
    "*.ipynb",
    "cpp/",
    "py/torch_tensorrt/fx/",
]

[tool.typos.default]
extend-ignore-identifiers-re = [
    "^([A-z]|[a-z])*Nd*",
    "^([A-z]|[a-z])*nd*",
    "activ*([A-z]|[a-z]|[0-9])*,",
]

[tool.typos.default.extend-words]
arange = "arange"
